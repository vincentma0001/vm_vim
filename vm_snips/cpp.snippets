# ================================================================================================ #
# ==                                                                                            == #
# ==                                        cpp.snippets                                        == #
# ==                                                                                            == #
# == ------------------------------------------------------------------------------------------ == #
# ==                                                                                            == #
# ==   Author               : v.m. ( vincent_ma000!hotmail.com )                                == #
# ==   Version              : 0.0.0.0                                                           == #
# ==   Create Time          : 2020-09-15 00:32:11                                               == #
# ==   Modify Time          : 2020-09-15 19:08:20                                               == #
# ==   Issue  List          :                                                                   == #
# ==   Change List          :                                                                   == #
# ==     [    0.0.0.0     ] - Basic version                                                     == #
# ==                                                                                            == #
# == ------------------------------------------------------------------------------------------ == #
# ==                                                                                            == #
# ==   Copyright(c) : This file has copyrighted by v.m., the all right will been reserved!      == #
# ==                                                                                            == #
# ================================================================================================ #

# sligthly lower priority than everything else since specialized versions
# should overwrite. The user needs to adjust her priority in her snippets to
# ~-55 so that other filetypes will still overwrite
priority -60

# ================================================================================================ #
# ==  载入python函数                                                                            == #
# ================================================================================================ #
# [ global ] {{{
global !p
import px.snippets

from vm_snip_vim    import *
from vm_snip_define import *
from vm_snip_line   import vLine
endglobal
# }}} ![ global ]
# ================================================================================================ #

# ================================================================================================ #
# ==  添加C代码块扩展                                                                           == #
# ------------------------------------------------------------------------------------------------ #
# [ 添加C代码块扩展 ] {{{
extends c
# }}} ! [ 添加C代码块扩展 ]
# ================================================================================================ #

# ================================================================================================ #
# ==  文件模板代码块                                                                            == #
# ================================================================================================ #
# [ 文件模板代码块 ] {{{

# ------------------------------------------------------------------------------------------------ #
# [ #incc : #includ <iostream> ] {{{
snippet #incc "#includ <iostream>" bw
#include <${1:iostream}>
endsnippet
# }}} End of SnipFunc #incc
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# ==  [ #incc2 : #include <iostream> ] {{{
snippet #incc2 "#include <iostream>" bw
#ifndef    __`!p snip.rv=str(t[1]).upper()`__
#   Error : this file need #include <${1:iostream}>
#endif // !__`!p snip.rv=str(t[1]).upper()`__
endsnippet
# ==  }}} End of SnipFunc #incc2
# ------------------------------------------------------------------------------------------------ #

# }}} ![ 文件模板代码块 ]
# ================================================================================================ #

# ================================================================================================ #
# ==  STL元素代码段                                                                             == #
# ================================================================================================ #
# [ STL元素代码段 ] {{{

# ------------------------------------------------------------------------------------------------ #
# std::array
snippet array
std::array<${1:T}, ${2:N}> ${3};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::vector
snippet vector
std::vector<${1:T}> ${2};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::deque
snippet deque
std::deque<${1:T}> ${2};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::forward_list
snippet flist
std::forward_list<${1:T}> ${2};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::list
snippet list
std::list<${1:T}> ${2};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::set
snippet set
std::set<${1:T}> ${2};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::map
snippet map
std::map<${1:Key}, ${2:T}> ${3};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::multiset
snippet mset
std::multiset<${1:T}> ${2};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::multimap
snippet mmap
std::multimap<${1:Key}, ${2:T}> ${3};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::unordered_set
snippet uset
std::unordered_set<${1:T}> ${2};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::unordered_map
snippet umap
std::unordered_map<${1:Key}, ${2:T}> ${3};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::unordered_multiset
snippet umset
std::unordered_multiset<${1:T}> ${2};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::unordered_multimap
snippet ummap
std::unordered_multimap<${1:Key}, ${2:T}> ${3};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::stack
snippet stack
std::stack<${1:T}> ${2};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::queue
snippet queue
std::queue<${1:T}> ${2};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::priority_queue
snippet pqueue
std::priority_queue<${1:T}> ${2};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# }}} ![ C++元素代码段 ]
# ================================================================================================ #

# ================================================================================================ #
# ==  STL智能指针                                                                               == #
# ================================================================================================ #
# [ STL智能指针 ] {{{

# ------------------------------------------------------------------------------------------------ #
# std::shared_ptr
snippet msp
std::shared_ptr<${1:T}> ${2} = std::make_shared<$1>(${3});
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
snippet amsp
auto ${1} = std::make_shared<${2:T}>(${3});
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::unique_ptr
snippet mup
std::unique_ptr<${1:T}> ${2} = std::make_unique<$1>(${3});
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
snippet amup
auto ${1} = std::make_unique<${2:T}>(${3});
endsnippet
# ------------------------------------------------------------------------------------------------ #

# }}} ![ STL智能指针 ]
# ================================================================================================ #

# ================================================================================================ #
# ==  C++语法元素                                                                               == #
# ================================================================================================ #
# [ C++语法元素 ] {{{

# ------------------------------------------------------------------------------------------------ #
# private
snippet pri
private   :
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# protected
snippet pro
protected :
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# public
snippet pub
public    :
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# friend
snippet fr
friend    :
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# mutable
snippet mu
mutable   :
endsnippet
# ------------------------------------------------------------------------------------------------ #

# }}} ![ C++语法元素 ]
# ================================================================================================ #

# ================================================================================================ #
# ==  Class定义                                                                                 == #
# ================================================================================================ #
# [ Class定义 ] {{{

# ------------------------------------------------------------------------------------------------ #
# [ class : class define ] {{{
snippet class "class define" bw
`!p line =vLine()
lsTxtClass = " Class "+t[1]+" : "
``!p snip.rv = line.Line_txt_f("=",[" ===","=== "])`
`!p snip.rv  = line.Line_l()+lsTxtClass`${2:TODO add class brief here}`!p snip.rv=line.Line_spc_r(lsTxtClass+t[2])`
`!p snip.rv  = line.Line_txt_f("-",[" ---","--- "])`
`!p snip.rv  = line.Line_l(["",""])` [ Class $1 ] {{{
class ${1:class_name}
{ 
`!p snip.rv  = line.Line_txt_f("-",[" ---","--- "])`
`!p snip.rv  = line.Line_l(["",""])` Construct & Destruct : {{{
public    :
    // Construct & Destruct define
    explicit $1(){}
    virtual ~$1(){}

private   :
    // No copy
    $1( const $1 obj ){};
    // No Assignment
    $1& operator = ( const $1 obj ){};
`!p snip.rv  = line.Line_l(["",""])` }}} ! Construct & Destruct

`!p snip.rv  = line.Line_txt_f("-",[" ---","--- "])`
`!p snip.rv  = line.Line_l(["",""])` Menbers : {{{
private   :
    // TODO Add class's menbers here
`!p snip.rv  = line.Line_l(["",""])` }}} ! Members

`!p snip.rv  = line.Line_txt_f("-",[" ---","--- "])`
`!p snip.rv  = line.Line_l(["",""])` Functions : {{{
public    :
    // TODO Add class's functions here
`!p snip.rv  = line.Line_l(["",""])` }}} ! Functions

`!p snip.rv  = line.Line_l(["",""])` }}} ! [ class $1 ]
`!p snip.rv  = line.Line_txt_f('=',[" ===","=== "])`
endsnippet
# }}} End of SnipFunc class
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ cMacro : class's macro defin ] {{{
snippet cMacro "class's macro defin" bw
`!p line =vLine()
``!p snip.rv = line.Line_txt_f("-",[" ---","--- "])`
`!p snip.rv  = line.Line_l(["",""])` Macro defines : {{{
    #define ${1:Symabl} ${2:Value}
`!p snip.rv  = line.Line_l(["",""])` }}} ! Macro defines
endsnippet
# }}} End of SnipFunc C_Macro
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ cTypedef : class's typedef ] {{{
snippet cTypedef "class's typedef" bw
`!p line =vLine()
``!p snip.rv = line.Line_txt_f("-",[" ---","--- "])`
`!p snip.rv  = line.Line_l(["",""])` Type  defines : {{{
    typedef ${1:Oldtype} ${2:Newtype}
`!p snip.rv  = line.Line_l(["",""])` }}} ! Type defines
endsnippet
# }}} End of SnipFunc cTypedef
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ mfunc : class's function defin ] {{{
snippet mfunc "class's function defin" bw
${5:void} ${1:Class_Name}::${2:Func_name}(${3:Param_type} ${4:Param_name}) {
    ${0}
}
endsnippet
# }}} End of SnipFunc mfunc
# ------------------------------------------------------------------------------------------------ #

# }}} ! [ Class定义 ]
# ================================================================================================ #

# ================================================================================================ #
# ==  其他定义                                                                                  == #
# ================================================================================================ #
# [ 其他定义 ] {{{

# ------------------------------------------------------------------------------------------------ #
# [ namespace : Create namespace ] {{{
snippet namespace "create a namespace" bw
namespace ${1::space_name`} {

    ${0:${VISUAL}}

} // namespace $1 
endsnippet
# }}} End of SnipFunc namespace

# ------------------------------------------------------------------------------------------------ #

snippet cout
std::cout << ${1} << std::endl;
endsnippet

# ------------------------------------------------------------------------------------------------ #

# std::cin
snippet cin
std::cin >> ${1};
endsnippet

# ------------------------------------------------------------------------------------------------ #

snippet sca
static_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

# ------------------------------------------------------------------------------------------------ #

# dynamic
snippet dca
dynamic_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

# ------------------------------------------------------------------------------------------------ #

# reinterpret
snippet rca
reinterpret_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

# ------------------------------------------------------------------------------------------------ #

# const
snippet cca
const_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

# ------------------------------------------------------------------------------------------------ #

# }}} ![ 其他定义 ]
# ================================================================================================ #

# ================================================================================================ #
# ==  循环定义                                                                                  == #
# ================================================================================================ #
# [ 循环定义 ] {{{

# for i
snippet fori
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4}
	}
endsnippet

# ------------------------------------------------------------------------------------------------ #

# foreach
snippet fore
	for (${1:auto} ${2:i} : ${3:container}) {
		${4}
	}
endsnippet

# ------------------------------------------------------------------------------------------------ #

# iterator
snippet iter
	for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
		${6}
	}
endsnippet

# ------------------------------------------------------------------------------------------------ #

# auto iterator
snippet itera
	for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
		${3:std::cout << *$1 << std::endl;}
	}
endsnippet

# ------------------------------------------------------------------------------------------------ #

# }}} ![ 循环定义 ]
# ================================================================================================ #

# ================================================================================================ #
# ==                                        End of file                                         == #
# ================================================================================================ #
