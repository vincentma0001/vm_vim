# ================================================================================================ #
# ==                                                                                            == #
# ==                                        cpp.snippets                                        == #
# ==                                                                                            == #
# == ------------------------------------------------------------------------------------------ == #
# ==                                                                                            == #
# ==   Author               : v.m. ( vincent_ma0001@hotmail.com )                               == #
# ==   Version              : 0.0.0.0                                                           == #
# ==   Create Time          : 2020-09-15 00:32:11                                               == #
# ==   Modify Time          : 2020-10-05 10:07:33                                               == #
# ==   Issue  List          :                                                                   == #
# ==   Change List          :                                                                   == #
# ==     [    0.0.0.0     ] - Basic version                                                     == #
# ==                                                                                            == #
# == ------------------------------------------------------------------------------------------ == #
# ==                                                                                            == #
# ==   Copyright(c) : This file has copyrighted by v.m., the all right will been reserved!      == #
# ==                                                                                            == #
# ================================================================================================ #

# sligthly lower priority than everything else since specialized versions
# should overwrite. The user needs to adjust her priority in her snippets to
# ~-55 so that other filetypes will still overwrite
priority -60

# ================================================================================================ #
# ==  载入python函数                                                                            == #
# ================================================================================================ #
# [ global ] {{{
global !p
import px.snippets

from vm_snip_vim    import *
from vm_snip_define import *
from vm_snip_line   import vLine
endglobal
# }}} ![ global ]
# ================================================================================================ #

# ================================================================================================ #
# ==  添加C代码块扩展                                                                           == #
# ------------------------------------------------------------------------------------------------ #
# [ 添加C代码块扩展 ] {{{
extends c
# }}} ! [ 添加C代码块扩展 ]
# ================================================================================================ #

# ================================================================================================ #
# ==  文件模板代码块                                                                            == #
# ================================================================================================ #
# [ 文件模板代码块 ] {{{

# ------------------------------------------------------------------------------------------------ #
# [ #incc : #includ <iostream> ] {{{
snippet #incc "#includ <iostream>" bw
#include <${1:iostream}>
endsnippet
# }}} End of SnipFunc #incc
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ #incc1 : #include <iostream> ] {{{
snippet #incc1 "#include <iostream>" bw
`!p 
lsfile = split_file(t[1])
`
#ifndef     __`!p snip.rv=lsfile.upper()`_H__
#   error this file need #include <${1:iostream}>
#endif  // !__`!p snip.rv=lsfile.upper()`_H__
endsnippet
# }}} End of SnipFunc #incc1
# ------------------------------------------------------------------------------------------------ #

# }}} ![ 文件模板代码块 ]
# ================================================================================================ #

# ================================================================================================ #
# ==  STL元素代码段                                                                             == #
# ================================================================================================ #
# [ STL元素代码段 ] {{{

# ------------------------------------------------------------------------------------------------ #
# std::array
snippet array
std::array<${1:T}, ${2:N}> ${3};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::vector
snippet vector
std::vector<${1:T}> ${2};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::deque
snippet deque
std::deque<${1:T}> ${2};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::forward_list
snippet flist
std::forward_list<${1:T}> ${2};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::list
snippet list
std::list<${1:T}> ${2};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::set
snippet set
std::set<${1:T}> ${2};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::map
snippet map
std::map<${1:Key}, ${2:T}> ${3};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::multiset
snippet mset
std::multiset<${1:T}> ${2};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::multimap
snippet mmap
std::multimap<${1:Key}, ${2:T}> ${3};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::unordered_set
snippet uset
std::unordered_set<${1:T}> ${2};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::unordered_map
snippet umap
std::unordered_map<${1:Key}, ${2:T}> ${3};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::unordered_multiset
snippet umset
std::unordered_multiset<${1:T}> ${2};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::unordered_multimap
snippet ummap
std::unordered_multimap<${1:Key}, ${2:T}> ${3};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::stack
snippet stack
std::stack<${1:T}> ${2};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::queue
snippet queue
std::queue<${1:T}> ${2};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::priority_queue
snippet pqueue
std::priority_queue<${1:T}> ${2};
endsnippet
# ------------------------------------------------------------------------------------------------ #

# }}} ![ C++元素代码段 ]
# ================================================================================================ #

# ================================================================================================ #
# ==  STL智能指针                                                                               == #
# ================================================================================================ #
# [ STL智能指针 ] {{{

# ------------------------------------------------------------------------------------------------ #
# std::shared_ptr
snippet msp
std::shared_ptr<${1:T}> ${2} = std::make_shared<$1>(${3});
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
snippet amsp
auto ${1} = std::make_shared<${2:T}>(${3});
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# std::unique_ptr
snippet mup
std::unique_ptr<${1:T}> ${2} = std::make_unique<$1>(${3});
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
snippet amup
auto ${1} = std::make_unique<${2:T}>(${3});
endsnippet
# ------------------------------------------------------------------------------------------------ #

# }}} ![ STL智能指针 ]
# ================================================================================================ #

# ================================================================================================ #
# ==  C++语法元素                                                                               == #
# ================================================================================================ #
# [ C++语法元素 ] {{{

# ------------------------------------------------------------------------------------------------ #
# private
snippet pri "private:" bw
private:
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# protected
snippet pro "protected:" bw
protected:
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# public
snippet pub "public:" bw
public:
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# friend
snippet frd "friend:" bw
friend:
endsnippet
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# mutable
snippet mut "mutable:" bw
mutable:
endsnippet
# ------------------------------------------------------------------------------------------------ #

# }}} ![ C++语法元素 ]
# ================================================================================================ #

# ================================================================================================ #
# ==  Class定义                                                                                 == #
# ================================================================================================ #
# [ Class定义 ] {{{

# ------------------------------------------------------------------------------------------------ #
# [ class : class define ] {{{
snippet class "class define" bw
`!p line =vLine()
lsTxtClass = " Class "+t[1]+" : "
``!p snip.rv = line.Line_txt_f("=",[" ===","=== "])`
`!p snip.rv  = line.Line_l()+lsTxtClass`${2:TODO add class brief here}`!p snip.rv=line.Line_spc_r(lsTxtClass+t[2])`
`!p snip.rv  = line.Line_txt_f("-",[" ---","--- "])`
class ${1:class_name}
// {{{
{
`!p snip.rv  = line.Line_txt_f("-",[" ---","--- "])`
`!p snip.rv  = line.Line_l(["",""])` Construct & Destruct : {{{
public:
    // Construct & Destruct define
    inline explicit $1();
    inline virtual ~$1();

private:
    // Copy construct define
    inline $1( const $1 &obj );
    // Assignment operation
    inline $1& operator = ( const $1 &obj );
`!p snip.rv  = line.Line_l(["",""])` }}} ! Construct & Destruct

`!p snip.rv  = line.Line_txt_f("-",[" ---","--- "])`
`!p snip.rv  = line.Line_l(["",""])` Menbers   : {{{
private:
    /* TODO Add class's menbers here */
`!p snip.rv  = line.Line_l(["",""])` }}} ! Members

`!p snip.rv  = line.Line_txt_f("-",[" ---","--- "])`
`!p snip.rv  = line.Line_l(["",""])` Methods   : {{{
public:
    /* TODO Add class's Methods here */
`!p snip.rv  = line.Line_l(["",""])` }}} ! Methods

};
`!p snip.rv  = line.Line_l(["",""])` }}} ! [ class $1 ]
`!p snip.rv  = line.Line_txt_f('=',[" ===","=== "])`
`!p snip.rv  = cmt()[0]` Class realization :
#include "`!p snip.rv=snip.fn+".inl"`"
`!p snip.rv  = line.Line_txt_f('=',[" ===","=== "])`
endsnippet
# }}} End of SnipFunc class
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ cReal   : class realization initialize ] {{{
snippet cReal "class realization initialize" bw

`!p line =vLine()
``!p snip.rv = line.Line_txt_f("=",[" ===","=== "])`
`!p snip.rv  = line.Line_txt_t(" Class "+t[1]+" Construct && Destruct realization")`
`!p snip.rv  = line.Line_txt_f("=",[" ===","=== "])`
`!p snip.rv  = cmt()[0]` [ Class $1 Construct && Destruct realization ] {{{

`!p snip.rv  = line.Line_txt_f("=",[" ===","=== "])`
`!p snip.rv  = line.Line_txt_t(" Methord : "+t[1]+"::"+t[1]+"()")`
`!p snip.rv  = line.Line_txt_f("-")`
`!p snip.rv  = line.Line_l()` Brief   : Construct define
inline explicit vm::${1:CLASS_NAME}::$1(  )
// {{{
{
}
// }}} End of func $1::$1()
`!p snip.rv  = line.Line_txt_f("=",[" ===","=== "])`

`!p snip.rv  = line.Line_txt_f("=",[" ===","=== "])`
`!p snip.rv  = line.Line_txt_t(" Methord : virtual "+t[1]+"::"+t[1]+"()")`
`!p snip.rv  = line.Line_txt_f("-")`
`!p snip.rv  = line.Line_l()` Brief   : Destruct define
inline virtual vm::$1::~$1(  )
// {{{
{
}
// }}} End of func $1::~$1()
`!p snip.rv  = line.Line_txt_f("=",[" ===","=== "])`

`!p snip.rv  = line.Line_txt_f("=",[" ===","=== "])`
`!p snip.rv  = line.Line_txt_t(" Methord : "+t[1]+"::"+t[1]+"()")`
`!p snip.rv  = line.Line_txt_f("-")`
`!p snip.rv  = line.Line_l()` Brief   : Copy construct define
inline vm::$1::$1( const vm::$1 &obj )
// {{{
{
    *this = obj;
}
// }}} End of func $1::~$1()
`!p snip.rv  = line.Line_txt_f("=",[" ===","=== "])`

`!p snip.rv  = cmt()[0]` }}} ![ Class $1 Construct && Destruct realization ]
`!p snip.rv  = line.Line_txt_f("=",[" ===","=== "])`


`!p snip.rv  = line.Line_txt_f("=",[" ===","=== "])`
`!p snip.rv  = line.Line_txt_t(" Class "+t[1]+" operator realization")`
`!p snip.rv  = line.Line_txt_f("=",[" ===","=== "])`
`!p snip.rv  = cmt()[0]` [ Class $1 operator realization ] {{{

`!p snip.rv  = line.Line_txt_f("=",[" ===","=== "])`
`!p snip.rv  = line.Line_txt_t(" Methord : "+t[1]+"::operator = ()")`
`!p snip.rv  = line.Line_txt_f("-")`
`!p snip.rv  = line.Line_l()` Brief   : Assignment operation
`!p snip.rv  = line.Line_l()` Return  : `!p snip.rv = line.Txt_l(t[1]+'&',gLine['MinParamLen'])` - [O] this object
inline vm::$1& vm::$1::operator = ( const vm::$1 &obj )
// {{{
{
    return *this;
}
// }}} End of func $1::~$1()
`!p snip.rv  = line.Line_txt_f("=",[" ===","=== "])`

`!p snip.rv  = cmt()[0]` }}} ![ Class $1 operator realization ]
`!p snip.rv  = line.Line_txt_f("=",[" ===","=== "])`


`!p snip.rv  = line.Line_txt_f("=",[" ===","=== "])`
`!p snip.rv  = line.Line_txt_t(" Class "+t[1]+" Functional realization")`
`!p snip.rv  = line.Line_txt_f("=",[" ===","=== "])`
`!p snip.rv  = cmt()[0]` [ Class $1 Functional realization ] {{{

${0}

`!p snip.rv  = cmt()[0]` }}} ![ Class $1 Functional realization ]
`!p snip.rv  = line.Line_txt_f("=",[" ===","=== "])`

endsnippet
# }}} End of SnipFunc cReal
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ cMenber : class's menber define ] {{{
snippet cMenber "class's menber define" bw
`!p line =vLine()
``!p snip.rv = line.Line_txt_f("-",[" ---","--- "])`
`!p snip.rv  = line.Line_l(["",""])` Methods   : {{{
public:
    ${0:/* TODO Add class's Methods here */}
`!p snip.rv  = line.Line_l(["",""])` }}} ! Methods

endsnippet
# }}} End of SnipFunc cMenber
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ cMethod : class's method define ] {{{
snippet cMethod "class's method define" bw
`!p line =vLine()
``!p snip.rv = line.Line_txt_f("-",[" ---","--- "])`
`!p snip.rv  = line.Line_l(["",""])` Methods   : {{{
public:
    ${0:/* TODO Add class's Methods here */}
`!p snip.rv  = line.Line_l(["",""])` }}} ! Methods

endsnippet
# }}} End of SnipFunc cMethod
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ cMacrodef : class's macro defin ] {{{
snippet cMacro "class's macro defin" bw
`!p line =vLine()
``!p snip.rv = line.Line_txt_f("-",[" ---","--- "])`
`!p snip.rv  = line.Line_l(["",""])` Macrodefs : {{{
    #define ${1:Symabl} ${2:Value}
`!p snip.rv  = line.Line_l(["",""])` }}} ! Macrodefs
endsnippet
# }}} End of SnipFunc cMacrodef
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ cTypedef  : class's typedef ] {{{
snippet cTypedef "class's typedef" bw
`!p line =vLine()
``!p snip.rv = line.Line_txt_f("-",[" ---","--- "])`
`!p snip.rv  = line.Line_l(["",""])` Typedefs  : {{{
public:
    typedef typename ${1:Oldtype} ${2:Newtype};
`!p snip.rv  = line.Line_l(["",""])` }}} ! Typedefs
endsnippet
# }}} End of SnipFunc cTypedef
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ cStdef    : class's type define for std members ] {{{
snippet cStdef "type define for std members" bw
`!p line =vLine()
``!p snip.rv = line.Line_txt_f("-",[" ---","--- "])`
`!p snip.rv  = line.Line_l(["",""])` Typedefs  : {{{
public:
    typedef typename std::${1:vertor}<${2:type}>                t$1;
    typedef typename std::$1<$2>::iterator      t$1Iter;
`!p snip.rv  = line.Line_l(["",""])` }}} ! Typedefs

endsnippet
# }}} End of SnipFunc cStdef
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ cFriend   : class's friend define ] {{{
snippet cFriend "class's friend define" bw
`!p line =vLine()
``!p snip.rv = line.Line_txt_f("-",[" ---","--- "])`
`!p snip.rv  = line.Line_l(["",""])` Friendefs : {{{
friend class ${0:friendclassname};
`!p snip.rv  = line.Line_l(["",""])` }}} ! Friendefs

endsnippet
# }}} End of SnipFunc cFriend
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ mfunc : class's function define ] {{{
snippet mfunc "class's function define" bw
`!p line=vLine()`
`!p snip.rv=line.Line_txt_f( '=', [" ===","=== "] )`
`!p snip.rv=line.Line_txt_t( " Methord : "+t[1]+"::"+t[2]+"(...)" )`
`!p snip.rv=line.Line_txt_f( '-' )`
`!p snip.rv=line.Line_l()` Brief   : ${5:# TODO : Add function brief #}
`!p snip.rv=line.Line_l()` Return  : `!p snip.rv=t[4]+line.Spc_r(t[4],gLine['MinParamLen'])` - [O] ${0:Nothing for return}
`!p snip.rv=line.Line_l()` Params  : `!p
snip.rv = ""
snip >> 2
args = get_args(t[3])
if args:
    for index in range(len(args)):
        lsArgName = args[index].split(" ",-1)
        if index==0:
            snip.rv += lsArgName[-1]+line.Spc_r(lsArgName[-1],gLine['MinParamLen'])+ ' - [X] # TODO : Add comment for '+lsArgName[-1]+' #'
            continue
        snip.rv += '\n'+line.Line_l()+"           "+lsArgName[-1]+line.Spc_r(lsArgName[-1],gLine['MinParamLen'])+ ' - [X] # TODO : Add comment for '+lsArgName[-1]+' #'
snip<<2
`
inline ${4:void} vm::${1:Class_Name}::${2:Func_name}( ${3:p_type p_name} )
`!p snip.rv=cmt()[0]` {{{
{
    ${VISUAL:# TODO : add function codes here #}
}
`!p snip.rv=cmt()[0]` }}} end of func $1::$2(...)
`!p snip.rv=line.Line_txt_f( '=', [" ===","=== "] )`

endsnippet
# }}} End of SnipFunc mfunc
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ tfunc : class's function with template<> ] {{{
snippet tfunc "class's function with template<>" bw
`!p line=vLine()`
`!p snip.rv=line.Line_txt_f( '=', [" ===","=== "] )`
`!p snip.rv=line.Line_txt_t( " Methord : "+t[3]+"<"+t[2]+">::"+t[4]+"(...)" )`
`!p snip.rv=line.Line_txt_f( '-' )`
`!p snip.rv=line.Line_l()` Brief   : ${7:# TODO : Add function brief #}
`!p snip.rv=line.Line_l()` Return  : `!p snip.rv=t[6]+line.Spc_r(t[6],gLine['MinParamLen'])` - [O] ${0:Nothing for return}
`!p snip.rv=line.Line_l()` Params  : `!p
snip.rv = ""
snip >> 2
args = get_args(t[5])
if args:
    for index in range(len(args)):
        lsArgName = args[index].split(" ",-1)
        if index==0:
            snip.rv += lsArgName[-1]+line.Spc_r(lsArgName[-1],gLine['MinParamLen'])+ ' - [X] # TODO : Add comment for '+lsArgName[-1]+' #'
            continue
        snip.rv += '\n'+line.Line_l()+"           "+lsArgName[-1]+line.Spc_r(lsArgName[-1],gLine['MinParamLen'])+ ' - [X] # TODO : Add comment for '+lsArgName[-1]+' #'
snip<<2
`
template<${1:typename} ${2:tName}>
${6:void} vm::${3:Class_Name}<$2>::${4:Func_name}( ${5:p_type p_name} )
`!p snip.rv=cmt()[0]` {{{ 
{
    ${VISUAL:# TODO : add function codes here #}
}
`!p snip.rv=cmt()[0]` }}} end of func $3<$2>::$4(...)
`!p snip.rv=line.Line_txt_f( '=', [" ===","=== "] )`

endsnippet
# }}} End of SnipFunc tfunc
# ------------------------------------------------------------------------------------------------ #

# }}} ! [ Class定义 ]
# ================================================================================================ #

# ================================================================================================ #
# ==  其他定义                                                                                  == #
# ================================================================================================ #
# [ 其他定义 ] {{{

# ------------------------------------------------------------------------------------------------ #
# [ namespace : Create namespace ] {{{
snippet namespace "create a namespace" bw
`!p line=vLine()`
`!p snip.rv=line.Line_txt_f( '=', [" ===","=== "] )`
`!p snip.rv=cmt()[0]` using namespace vm {{{
namespace vm
{

${0:${VISUAL}}

} 
`!p snip.rv=cmt()[0]` }}} End of namespace vm
`!p snip.rv=line.Line_txt_f( '=', [" ===","=== "] )`

endsnippet
# }}} End of SnipFunc namespace
# ------------------------------------------------------------------------------------------------ #

snippet cout
std::cout << ${1} << std::endl;
endsnippet

# ------------------------------------------------------------------------------------------------ #

snippet cin
std::cin >> ${1};
endsnippet

# ------------------------------------------------------------------------------------------------ #

snippet sca
static_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

# ------------------------------------------------------------------------------------------------ #

# dynamic
snippet dca
dynamic_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

# ------------------------------------------------------------------------------------------------ #

# reinterpret
snippet rca
reinterpret_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

# ------------------------------------------------------------------------------------------------ #

# const
snippet cca
const_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

# ------------------------------------------------------------------------------------------------ #

# }}} ![ 其他定义 ]
# ================================================================================================ #

# ================================================================================================ #
# ==  循环定义                                                                                  == #
# ================================================================================================ #
# [ 循环定义 ] {{{

# for i
snippet fori
for ( int ${1:i}=0; $1<${2:count}; $2${3:++} )
{
    ${0:${VISUAL}}
}
endsnippet

# ------------------------------------------------------------------------------------------------ #

# foreach
snippet fore
for ( ${1:auto} ${2:i} : ${3:container} ) 
{
    ${4}
}
endsnippet

# ------------------------------------------------------------------------------------------------ #

# iterator
snippet forIter
${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin()
for ( ; $4 != $5.end(); ++$4 ) 
{
    ${6}
}
endsnippet

# ------------------------------------------------------------------------------------------------ #

# auto iterator
snippet itera
for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) 
{
    ${3:std::cout << *$1 << std::endl;}
}
endsnippet

# ------------------------------------------------------------------------------------------------ #

# }}} ![ 循环定义 ]
# ================================================================================================ #

# ================================================================================================ #
# ==                                        End of file                                         == #
# ================================================================================================ #
