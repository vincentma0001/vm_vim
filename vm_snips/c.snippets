# ================================================================================================ #
# ==                                                                                            == #
# ==                                         c.snippets                                         == #
# ==                                                                                            == #
# == ------------------------------------------------------------------------------------------ == #
# ==                                                                                            == #
# ==   Author               : v.m. ( vincent_ma000!hotmail.com )                                == #
# ==   Version              : 0.0.0.0                                                           == #
# ==   Create Time          : 2020-09-14 11:18                                                  == #
# ==   Modify Time          : 2020-11-16 12:36                                                  == #
# ==   Issue  List          :                                                                   == #
# ==   Change List          :                                                                   == #
# ==     [    0.0.0.0     ] - Basic version                                                     == #
# ==                                                                                            == #
# == ------------------------------------------------------------------------------------------ == #
# ==                                                                                            == #
# ==   Copyright(c) : This file has copyrighted by v.m., the all right will been reserved!      == #
# ==                                                                                            == #
# ================================================================================================ #

# sligthly lower priority than everything else since specialized versions
# should overwrite. The user needs to adjust her priority in her snippets to
# ~-55 so that other filetypes will still overwrite
priority -60

# ================================================================================================ #
# ==  载入python函数                                                                            == #
# ================================================================================================ #
# [ global ] {{{
global !p
import string

from vm_snip_vim    import *
from vm_snip_define import *
from vm_snip_str    import *
from vm_snip_line   import vLine
endglobal
# }}} ![ global ]
# ================================================================================================ #

# ================================================================================================ #
# ==  vm's macro define snippet                                                                 == #
# ================================================================================================ #
# [ vm's macro define snippet ] {{{

# ------------------------------------------------------------------------------------------------ #
# [ #Macrow : Macro define block with wchar ] {{{
snippet #Macrow "Macro define block with wchar" bw
`!p line=vLine()`
`!p snip.rv=line.Line_txt_f('=',[" ===","=== "])`
#if defined( _V_USE_WCHAR_ ) && ( _V_USE_WCHAR != 0 )
`!p snip.rv = line.Line_txt_f("-",[" ---","--- "] )`
// {{{
    ${1:// # TODO : Add wchar macro define #}
// }}}
#else // default defined : _V_USE_WCHAR_ == 0 
// {{{
	${0:// # TODO : Add  char macro define #}
// }}}
#endif // !#if defined(...)
`!p snip.rv=line.Line_txt_f('=',[" ===","=== "])`
endsnippet
# }}} End of SnipFunc #Macrow
# ------------------------------------------------------------------------------------------------ #

# }}} ![ vm's macro define snippet ]
# ================================================================================================ #

# ================================================================================================ #
# ==  单元测试                                                                                  == #
# ================================================================================================ #
# [ 单元测试 ] {{{

# ------------------------------------------------------------------------------------------------ #
# [ #utInit : Create a unit test file ] {{{
snippet #utInit "Create a unit test file" bw

#include <vm_tools/vm_utst.h>

`!p line=vLine()
``!p snip.rv=line.Line_txt_f('=',[" ===","=== "])`
`!p snip.rv =line.Line_l(["",""])` [ ut_$2 ] {{{
UT_FUNC_BEGIN( ut_${2:func_name} )

vTry

    // Add unit test coder here
    ${0}

vCatch(...)
    return false;
vEnd
    return true;

UT_FUNC_ENDED
`!p snip.rv =line.Line_l(["",""])` }}} ! ut_$2
`!p snip.rv =line.Line_txt_f('=',[" ===","=== "])`

`!p 
line=vLine()
``!p snip.rv=line.Line_txt_f('=',[" ===","=== "])`
`!p snip.rv =line.Line_txt_l2("")` unit test frame tst_frame_$1`!p snip.rv=line.Line_spc_r(" unit test frame tst_frame_"+t[1])`
`!p snip.rv =line.Line_txt_f('=',[" ===","=== "])`
`!p snip.rv =line.Line_l(["",""])` [ tst_frame_$1 ] {{{
UT_FRAME_BEGIN ( tst_frame_${1:name} )
UT_FRAME_REGIST( ut_$2 )
UT_FRAME_ENDED
`!p snip.rv =line.Line_l(["",""])` }}} ![ tst_frame_$1 ]
`!p snip.rv =line.Line_txt_f('=',[" ===","=== "])`
endsnippet
# }}} End of SnipFunc #utInit
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ #utFunc : create a unit test frame ] {{{
snippet #utFunc "create a unit test frame" bw
`!p line=vLine()
``!p snip.rv=line.Line_txt_f('=',[" ===","=== "])`
`!p snip.rv =line.Line_l(["",""])` [ ut_$1 ] {{{
UT_FUNC_BEGIN( ut_${1:func_name} )

vTry

    // Add unit test coder here
    ${0}

vCatch(...)
    return false;
vEnd
    return true;

UT_FUNC_ENDED
`!p snip.rv =line.Line_l(["",""])` }}} ! ut_$1
`!p snip.rv =line.Line_txt_f('=',[" ===","=== "])`
endsnippet
# }}} End of SnipFunc #utFunc
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ #utFrame : Create a unit test function ] {{{
snippet #utFrame "Create a unit test function" bw
`!p 
line=vLine()
``!p snip.rv=line.Line_txt_f('=',[" ===","=== "])`
`!p snip.rv =line.Line_txt_l2(" ")` unit test frame tst_frame_$1 `!p snip.rv=line.Line_spc_r(" unit test frame tst_frame_"+t[1])`
`!p snip.rv =line.Line_txt_f('=',[" ===","=== "])`
`!p snip.rv =line.Line_l(["",""])` [ tst_frame_$1 ] {{{
UT_FRAME_BEGIN ( tst_frame_${1:name} )
UT_FRAME_REGIST( ut_${0:func_name} )
UT_FRAME_ENDED
`!p snip.rv =line.Line_l(["",""])` }}} ![ tst_frame_$1 ]
`!p snip.rv =line.Line_txt_f('=',[" ===","=== "])`
endsnippet
# }}} End of SnipFunc #utFrame
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ #utReg : Regist a ut function to ut frame ] {{{
snippet #utReg "Regist a ut function to ut frame" bw
UT_FRAME_REGIST( ut_${0:func_name} )
endsnippet
# }}} End of SnipFunc #utReg
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ #utRun : Run a unit test frame ] {{{
snippet #utRun "Run a unit test frame" bw
RUN_UNITTEST( tst_frame_${0:name} )
endsnippet
# }}} End of SnipFunc #utRun
# ------------------------------------------------------------------------------------------------ #

# }}} ![ 单元测试 ]
# ================================================================================================ #

# ================================================================================================ #
# ==  文件框架                                                                                  == #
# ================================================================================================ #
# [ 文件框架 ] {{{

# ------------------------------------------------------------------------------------------------ #
# [ main : Create main function ] {{{
snippet main "Create main function" bw
int main(int argc, char *argv[])
{
    ${0}
    return 0;
}
endsnippet
# }}} End of SnipFunc main
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ mainn : Create main func without argv[] ] {{{
snippet mainn "Create main func without argv[]" bw
int main(void)
{
    ${0}
    return 0;
}
endsnippet
# }}} End of SnipFunc mainn
# ------------------------------------------------------------------------------------------------ #

# }}} ![ 文件框架 ]
# ================================================================================================ #

# ================================================================================================ #
# ==  宏代码块                                                                                  == #
# ================================================================================================ #
# [ 宏代码块 ] {{{

# ------------------------------------------------------------------------------------------------ #
# [ vT : wchar/char input ] {{{
snippet vT "wchar/char input"
vT("${VISUAL}")
endsnippet
# }}} End of SnipFunc vT
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ #guard : Add file guard marcro ] {{{
snippet #guard "Add file guard marcro" bw
#ifndef  __`!v toupper(tr(expand("%"),'.','_'))`__
#define  __`!v toupper(tr(expand("%"),'.','_'))`__

${0:${VISUAL}}

#endif // ! __`!v toupper(tr(expand("%"),'.','_'))`__
endsnippet
# }}} End of SnipFunc #guard
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ #include : add include comment ] {{{
snippet #include "add include comment" bw
`!p line=vLine()`
`!p snip.rv = line.Line_txt_f("=",[" ===","=== "] )`
`!p snip.rv = line.Line_txt_t("Include files :")`
`!p snip.rv = line.Line_txt_f("-")`
`!p snip.rv = cmt()[0]` [ Include files ] {{{
${0:${VISUAL}}
`!p snip.rv = cmt()[0]` }}}
`!p snip.rv = line.Line_txt_f("=",[" ===","=== "] )`

endsnippet
# }}} End of SnipFunc #include
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ #incCmt :  ] {{{
snippet #incCmt "Add include file notes" bw
// crt, std files included
// system files inlcuded
//.vm's.function.depend.on.included
//.vm's.function.files.inlcuded${0}
endsnippet
# }}} End of SnipFunc #incCmt
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ #inc1 : Add include file to .c file ] {{{
snippet #inc1 "Add include <> file to .c file" bw
#include <${1:stdio}.h>${0}
endsnippet
# }}} End of SnipFunc #inc1
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ $inc2 : Add include file to .c file ] {{{
snippet #inc2 "Add include '' file to .c file" bw
#include "${1:`!v expand("%:r")`}.h"${0}
endsnippet
# }}} End of SnipFunc $inc2
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ #inc3 : Add include file to .h file ] {{{
snippet #inc3 "Add include file info with define macro" bw
`!p 
lsfile = split_file(t[1])
`
#ifndef     __`!p snip.rv=lsfile.upper()`_H__
#   error this file need #include <${1:stdio}.h>
#endif  // !__`!p snip.rv=lsfile.upper()`_H__
${0}
endsnippet
# }}} End of SnipFunc #inc3
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ #Warn : disable win warning ] {{{
snippet #Warn "disable win warning" bw
`!p line=vLine()`
`!p snip.rv = line.Line_txt_f("=",[" ===","=== "] )`
`!p snip.rv = cmt()[0]` Disable warnings :
#if defined (_MSC_VER)
#   pragma warning(disable:${1:4996})
#endif${0}
endsnippet
# }}} End of SnipFunc #Warn
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ #def : #define macro ] {{{
snippet #def "#define macro" bw
#define ${1:SYMBOL}             ${2:VALUE}${0}
endsnippet
# }}} End of SnipFunc #def
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ #if : #if macro ] {{{
snippet #if "#if ... " bw
#if        ${1:(Condition)}
    ${0:${VISUAL}}
#endif // !$1
endsnippet
# }}} End of SnipFunc #if
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ $ifel : $if ... else ... ] {{{
snippet $ifel "$if ... else ..." bw

snippet #if "#if ... " bw
#if        ${1:(Condition)}
    ${2:${VISUAL}}
#else  // !$1
    ${3:// TODO : add else codes}
#endif // !$1${0}
endsnippet
# }}} End of SnipFunc $ifel
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ #ifdef : #define macro ] {{{
snippet #ifdef "#ifdef ... " bw
#ifdef     $1
#   define ${1:SYMBOL}      ${2:VALUE}
#endif // !$1${0}
endsnippet
# }}} End of SnipFunc #ifdef
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ $ifeldef : #ifdef ... else ...  ] {{{
snippet $ifeldef "#ifdef ... else ... " bw
#ifdef     $1
#   define ${1:SYMBOL}      ${2:VALUE}
#else  //  #!def $1
#   define $1       ${3:VALUE}
#endif // !$1${0}
endsnippet
# }}} End of SnipFunc $ifeldef
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ #ifndef : #ifndef macro ] {{{
snippet #ifndef "#ifndef ... " bw
#ifndef    $1
#   define ${1:SYMBOL}      ${2:VALUE}
#endif // !$1${0}
endsnippet
# }}} End of SnipFunc #ifndef
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ $ifelndef : $ifndef ... #else ... ] {{{
snippet $ifelndef "#ifndef ... #else ..." bw
#ifndef    $1
#   define ${1:SYMBOL}      ${2:VALUE}
#else  // defined $1
#   define $1       ${3:VALUE}
#endif // !$1${0}
endsnippet
# }}} End of SnipFunc $ifelndef
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ #ifsys : #if macro with sys define ] {{{
snippet #ifsys "#if macro with sys define" bw
#if        ( _V_SYS_ == _V_WIN_ )
// Win coders {{{
//  TODO : add windows codes
// }}}
#elif      ( _V_SYS_ == _V_LUX_ )
// Lux codes {{{
//  TODO : add linux codes
// }}}
#endif // !( _V_SYS_ == _V_WIN_ )${0}
endsnippet
# }}} End of SnipFunc #ifsys
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ #ifwchar : #if ( _V_USE_WCHAR_ ==0 )... ] {{{
snippet #ifwchar "#if ( _V_USE_WCHAR_ ==0 )..." bw
#if        ( _V_USE_WCHAR_ == 0 )
// char codes {{{
// TODO : add char codes
// }}}
#else  //  ( _V_USE_WCHAR_ != 0 )
// wchar codes {{{
// TODO : add wchar codes
// }}}
#endif // !( _V_USE_WCHAR_ == 0 )${0}
endsnippet
# }}} End of SnipFunc #ifwchar
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ #ifwchar= : #===... #if ( _V_USE_WCHAR_==0 ) ... ] {{{
snippet #ifwchar= "#===... #if ( _V_USE_WCHAR_==0 ) ..." bw
`!p line=vLine()`
`!p snip.rv = line.Line_txt_f("=",[" ===","=== "] )`
#if        ( _V_USE_WCHAR_ == 0 )
`!p snip.rv = line.Line_txt_f("-",[" ---","--- "])`
// char codes {{{
// TODO : add char codes
// }}}
#else  //  ( _V_USE_WCHAR_ != 0 )
// wchar codes {{{
// TODO : add wchar codes
// }}}
`!p snip.rv = line.Line_txt_f("-",[" ---","--- "])`
#endif // !( _V_USE_WCHAR_ == 0 )${0}
`!p snip.rv = line.Line_txt_f("=",[" ===","=== "] )`
endsnippet
# }}} End of SnipFunc #ifwchar=
# ------------------------------------------------------------------------------------------------ #

# }}} ![ 宏代码块 ]
# ================================================================================================ #

# ================================================================================================ #
# ==  语法代码块                                                                                == #
# ================================================================================================ #
# [ 语法代码块 ] {{{

# ================================================================================================ #
# ==  if 代码块                                                                                 == #
# ------------------------------------------------------------------------------------------------ #
# [ if 代码块 ] {{{

# ------------------------------------------------------------------------------------------------ #
# [ if : if codes ] {{{
snippet if "if codes"
if (${1:true}) {
    // TODO : Condition comment 
    ${0:${VISUAL}}
} // End of if ( $1...
endsnippet
# }}} End of SnipFunc if
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ ifelse : if {} else {} codes ] {{{
snippet ifelse "if {} else {} codes"
if (${1:true}) {
    // TODO : Condition comment
    ${2:${VISUAL}}
} else {
    // TODO : Condition comment
    ${0}
} // End of if (...) else ...
endsnippet
# }}} End of SnipFunc ifelse
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ ifelseif : if {} else if {} else {} codes ] {{{
snippet ifelseif "if {} else {} codes"
if (${1:true}) {
    // TODO : Condition comment
    ${3:# TODO : add codes #${VISUAL}}
} else if ( ${2:true} ){
    // TODO : Condition comment
    ${4:# TODO : add codes #}
} else {
    // TODO : Condition comment
    ${4:# TODO : add codes #}
} // End of if (...) else ...
endsnippet
# }}} End of SnipFunc ifelse
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ if1 : if codes in one line ] {{{
snippet if1 "if codes in one line" bw
    if (${1:true}) { ${0} };
endsnippet
# }}} End of SnipFunc if1
# ------------------------------------------------------------------------------------------------ #

# }}} ! [ if 代码块 ]
# ================================================================================================ #

# ================================================================================================ #
# ==  switch 代码块                                                                             == #
# ------------------------------------------------------------------------------------------------ #
# [ switch 代码块 ] {{{

# ------------------------------------------------------------------------------------------------ #
# [ switch : switch codes ] {{{
snippet switch "switch codes" bw
switch (${1:/* variable */}) {
// {{{
    case ${2:/* variable case */}:
    { ${3:;} ${4:break;} }
    default:
    { ${5} }
} // }}} End of switch($1)
endsnippet
# }}} End of SnipFunc switch
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ switch2 : switch without define value ] {{{
snippet switch2 "switch without define value" bw
switch (${1:/* variable */}) {
// {{{
    case ${2:/* variable case */}:
    { ${3:;} ${4:break;} }
} // }}} End of switch($1)
endsnippet
# }}} End of SnipFunc switch2
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ case : case codes ] {{{
snippet case "case codes" bw
case ${1:/* variable case */}:
{ ${2:;} ${3:break;} }
endsnippet
# }}} End of SnipFunc case
# ------------------------------------------------------------------------------------------------ #

# }}} ! [ switch 代码块 ]
# ================================================================================================ #

# ================================================================================================ #
# ==  loop 代码块                                                                               == #
# ------------------------------------------------------------------------------------------------ #
# [ loop 代码块 ] {{{

# ------------------------------------------------------------------------------------------------ #
# [ while : while loop codes ] {{{
snippet while "while loop codes" bw
while (${1:/* condition */}) {
    ${0:${VISUAL}}
} // End of while( $1 )
endsnippet
# }}} End of SnipFunc while
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ do : do...while loop codes ] {{{
snippet do "do...while loop codes" bw
do { // $1
    ${0:${VISUAL}}
} while (${1:/* condition */});
endsnippet
# }}} End of SnipFunc do
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ for : for(...)... loop codes ] {{{
snippet for "for(...)... loop codes" bw
for (int ${1:i} = 0; $1 < ${2:count}; $1${3:++}) {
    ${0:${VISUAL}}
} // End of for ( $1 ...
endsnippet
# }}} End of SnipFunc for
# ------------------------------------------------------------------------------------------------ #

# }}} ! [ loop 代码块 ]
# ================================================================================================ #

# ================================================================================================ #
# ==  其他语法代码块                                                                            == #
# ------------------------------------------------------------------------------------------------ #
# [ 其他语法代码块 ] {{{

# ------------------------------------------------------------------------------------------------ #
# [ ? : ? function code ] {{{
snippet ? "? function code"
${1:/* a>b */} ? ${2:a} : ${3:b}
endsnippet
# }}} End of SnipFunc #?
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ nocxx : don't use cpp function ] {{{
snippet nocxx "don't use cpp function" bw
#ifdef __cplusplus
extern "C" {
#endif

${0}

#ifdef __cplusplus
} // extern "C"
#endif
endsnippet
# }}} End of SnipFunc nocxx
# ------------------------------------------------------------------------------------------------ #

# }}} ![ 其他语法代码块 ]
# ================================================================================================ #

# }}} ![ 语法代码块 ]
# ================================================================================================ #

# ================================================================================================ #
# ==  数据类型代码块                                                                            == #
# ================================================================================================ #
# [ 数据类型代码块 ] {{{

# ------------------------------------------------------------------------------------------------ #
# [ struct  : struct define ] {{{
snippet struct "def struct data" bw
// struct $1 : ${2:stName description}
struct ${1:stName}
// {{{
{
    ${3:int miData;}                // ${4:Data description}
}; 
// }}} End of def struct $1
endsnippet
# }}} End of SnipFunc struct
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ tStruct : typedef struct data ] {{{
snippet tStruct "typedef struct data" bw
// struct $1 : ${2:stName description}
typedef struct ${1:stName} 
// {{{
{
    ${3:int miData;}                // ${4:Data description}
} *P`!p snip.rv=str(t[1]).upper()`;
// }}} End of def struct $1
endsnippet
# }}} End of SnipFunc tStruct
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ enum    : enum define ] {{{
snippet enum "enum define" bw
// enum $1 : ${2:emName description}
enum ${1:emName}
// {{{
{
    ${3:emValue} = ${4:value}
};
// }}} End of def enum $1
endsnippet
# }}} End of SnipFunc enum
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ tEnum   : typedef enum data ] {{{
snippet tEnum "typedef enum data" bw
// enum $1 : ${2:emName description}
typedef enum ${1:emName}
// {{{
{
    ${3:emValue} = ${4:value}
} *P`!p snip.rv=str(t[1]).upper()`;
// }}} End of def enum $1
endsnippet
# }}} End of SnipFunc tEnum
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ union   : union define ] {{{
snippet union "union define" bw
// union $1 : ${2:$1 description}
union ${1:uiName}
// {{{
{
    ${0:int iValue = value;}
};
// }}} End of def union $1
endsnippet
# }}} End of SnipFunc union
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ tUnion  : typedef union data ] {{{
snippet tUnion "typedef union data" bw
// union $1 : ${2:$1 description}
typedef union ${1:uiName}
// {{{
{
    ${0:int iValue = value;}
} *P`!p snip.rv=str(t[1]).upper()`;
// }}} End of def union $1
endsnippet
# }}} End of SnipFunc tUnion
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ td : typedef ] {{{
snippet typedefd "typedef" bw
typedef ${1:int} ${2:MyCustomType};
endsnippet
# }}} End of SnipFunc td
# ------------------------------------------------------------------------------------------------ #

# }}} ![ 数据类型代码块 ]
# ================================================================================================ #

# ================================================================================================ #
# ==  函数定义代码块                                                                            == #
# ================================================================================================ #
# [ 函数定义代码块 ] {{{

# ------------------------------------------------------------------------------------------------ #
# [ dfunc : define function ] {{{
snippet dfunc "define function"
// ${4:func description}
${3:void} ${1:function_name}(${2});
endsnippet
# }}} End of SnipFunc dfunc
# ------------------------------------------------------------------------------------------------ #

# ------------------------------------------------------------------------------------------------ #
# [ cfunc : func define ] {{{
snippet cfunc "c func define" bw
`!p line=vLine()`
`!p snip.rv=line.Line_txt_f( '=', [" ===","=== "] )`
`!p snip.rv=line.Line_txt_t( " Methord : "+t[1]+"(...)" )`
`!p snip.rv=line.Line_txt_f( '-' )`
`!p snip.rv=line.Line_l()` Brief   : ${4:TODO : Add function brief #}
`!p snip.rv=line.Line_l()` Return  : `!p snip.rv=t[3]+line.Spc_r(t[3],gLine['MinParamLen'])` - [O] ${0:Nothing for return}
`!p snip.rv=line.Line_l()` Params  : `!p
snip.rv = ""
snip >> 2
args = get_args(t[2])
if args:
    for index in range(len(args)):
        lsArgName = args[index].split(" ",-1)
        if index==0:
            snip.rv += lsArgName[-1]+line.Spc_r(lsArgName[-1],gLine['MinParamLen'])+ ' - [X] # TODO : Add comment for '+lsArgName[-1]+' #'
            continue
        snip.rv += '\n'+line.Line_l()+"           "+lsArgName[-1]+line.Spc_r(lsArgName[-1],gLine['MinParamLen'])+ ' - [X] # TODO : Add comment for '+lsArgName[-1]+' #'
snip<<2
`
${3:void} vm::${1:func_name} ( ${2:p_type p_name} )
`!p snip.rv=cmt()[0]` {{{
{
    ${VISUAL:# TODO : add function codes here #}
}
`!p snip.rv=cmt()[0]` }}} end of func $1(...)
`!p snip.rv=line.Line_txt_f( '=', [" ===","=== "] )`

endsnippet
# }}} End of SnipFunc cfunc
# ------------------------------------------------------------------------------------------------ #

# }}} ![ 函数定义代码块 ]
# ================================================================================================ #

# ================================================================================================ #
# ==                                        End of file                                         == #
# ================================================================================================ #
